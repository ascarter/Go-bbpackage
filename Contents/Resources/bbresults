#!/usr/bin/env ruby

require 'optparse'
require 'digest/sha2'

# Show results browser with each entry on stdin
#
# Format:
#   [error|warning|note]:[path]:[line]:(col): [msg]

class Entry
  attr_reader :kind, :file, :line, :column, :message
  
  def initialize(kind="error", file=nil, line=nil, column=nil, message="")
    @kind = kind
    @file = file
    @line = line
    @column = column
    @message = message
  end
    
  def to_s()
    return "{result_kind:#{@kind}_kind, result_file:POSIX file \"#{@file}\", result_line:#{@line}, message: \"#{@message}\"}"
  end
  
  # id is a form of a key that disregards kind so that uniq can be used to filter
  def id()
    return Digest::SHA256.hexdigest("#{@file}:#{@line}:#{@message}")
  end

  def self.parse(cwd, value)
    # Match fields:
    # [0] == entire match
    # [1]
    # [2] == type
    # [3] == path
    # [4] == line
    # [5]
    # [6] == column
    # [7] == message
    m = /^((\w+?)[:])?(\S+?)[:](\d+?)([:](\d+))?[:]\s+?(.*)$/.match(value)
    return nil if m.nil?
  
    # kind
    kind = ["error", "warning", "note"].include?(m[2]) ? m[2] : "error"
  
    # file
    filename = m[3].sub(/^[.][\/]/,"")
    filename.prepend("#{cwd}/") if not filename.start_with?("/")
    file = File.expand_path(filename)
    return nil if !File.file?(file)
  
    # line, column
    line = m[4].nil? ? 0 : m[4].to_i
    column = m[6].nil? ? 0 : m[6].to_i
  
    # message
    message = m[7].strip unless m[7].nil?
  
    #STDERR.puts "kind='#{kind}' file='#{file}' line='#{line}' column='#{column}' message='#{message}'"  
    return Entry.new(kind, file, line, column, message)
  end
end

class Notification
  attr_reader :status, :result, :path, :message
    
  def initialize(message, path=nil, status=true, result=nil)
    @message = message
    @path = path
    @status = status
    if result.nil?
      @result = status ? "PASS" : "FAIL"
    else
      @result = result
    end
  end
  
  def to_s()
    return "#{self.result()} #{@path} #{@message}"
  end
    
  def self.parse(value)
    m = /^(\w+?)[ \t]+(\S+)\s+(.*)$/.match(value)
    return nil if m.nil?
    
    result = m[1]
    status = %w{OK ok PASS pass SUCCESS success}.include?(result)
    path = m[2].strip
    message = m[3].strip
    return Notification.new(message, path, status, result)
  end
end

def runAppleScript(script)
  IO.popen("osascript -l AppleScript - <<SCRIPT\n#{script}\nSCRIPT")
end

def showResults(title, entries)
  return if entries.length == 0
  runAppleScript %Q{tell application "BBEdit"\nmake new results browser with data {#{entries.join(",")}} with properties {name:"#{title}"}\nactivate\nend tell}
end

def showNotifications(title, notifications=[])
  return if notifications.length == 0
  
  # Determine if success for failure
  failed = notifications.select { |n| !n.status }
  subtitle = failed.empty? ? "PASS" : "FAIL"
  runAppleScript %Q{tell application "BBEdit"\ndisplay notification "#{notifications.join("\n")}" with title "#{title}" subtitle "#{subtitle}"\nend tell} 
end

# Read options
options = {
  :title => "Results",
  :cwd => Dir.pwd ,
  :verbose => false
}

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: bbresults [options]"
  opts.separator ""
  opts.on("-t", "--title TITLE", "Set title") do |t|
    options[:title] = t
  end
  opts.on("-d", "--dir DIR", "Set working directory") do |d|
    options[:cwd] = File.expand_path(d)
  end
  opts.on("-v", "--verbose", "Verbose output") do |v|
    options[:verbose] = v
  end
  opts.separator ""
  opts.separator "Input on STDIN in following format for each entry:"
  opts.separator "\t(error|warning|note):[path]:[line]:(col): [msg]"
end
opt_parser.parse!

# Get document root
if ENV.include?("BB_DOC_PATH")
  # Set working directory to doc path directory
  options[:cwd] = File.dirname(ENV["BB_DOC_PATH"])
end

# Read entries from stdin
entries = []
notifications = []
STDIN.readlines.each do |line|
  entry = Entry.parse(options[:cwd], line)
  unless entry.nil?
    entries.push entry unless entry.nil?
  else
    notification = Notification.parse(line)
    notifications.push notification unless notification.nil?
  end
  STDOUT.puts line if options[:verbose]
end

# Sort and filter entries
entries.sort_by! { |e| [e.file, e.line, e.message] }
entries.uniq! { |e| e.id }

# Display results browser
showResults(options[:title], entries)
showNotifications(options[:title], notifications)
