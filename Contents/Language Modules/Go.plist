<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
	"http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">

<!--
	Go language syntax
	Copyright 2014 Andrew Carter
-->

<dict>
	<key>BBEditDocumentType</key>
	<string>CodelessLanguageModule</string>
	<key>BBLMLanguageDisplayName</key>
	<string>Go</string>
	<key>BBLMLanguageCode</key>
	<string>go</string>
	<key>BBLMColorsSyntax</key>
	<true/>
	<key>BBLMScansFunctions</key>
	<true/>
	<key>BBLMCanSpellCheckCodeRuns</key>
	<false/>
	<key>BBLMIsCaseSensitive</key>
	<true/>
	<key>BBLMKeywordList</key>
	<array>
		<string>break</string>
		<string>case</string>
		<string>chan</string>
		<string>const</string>
		<string>continue</string>
		<string>default</string>
		<string>defer</string>
		<string>else</string>
		<string>fallthrough</string>
		<string>for</string>
		<string>func</string>
		<string>go</string>
		<string>goto</string>
		<string>if</string>
		<string>import</string>
		<string>interface</string>
		<string>map</string>
		<string>package</string>
		<string>range</string>
		<string>return</string>
		<string>select</string>
		<string>struct</string>
		<string>switch</string>
		<string>type</string>
		<string>var</string>
	</array>
	<key>BBLMPredefinedNameList</key>
	<array>
		<string>append</string>
		<string>cap</string>
		<string>close</string>
		<string>complex</string>
		<string>copy</string>
		<string>delete</string>
		<string>false</string>
		<string>imag</string>
		<string>int</string>
		<string>iota</string>
		<string>len</string>
		<string>make</string>
		<string>new</string>
		<string>nil</string>
		<string>panic</string>
		<string>print</string>
		<string>println</string>
		<string>real</string>
		<string>recover</string>
		<string>rune</string>
		<string>true</string>
		<!-- Default types -->
		<string>bool</string>
		<string>byte</string>
		<string>complex128</string>
		<string>complex64</string>
		<string>error</string>
		<string>float32</string>
		<string>float64</string>
		<string>int16</string>
		<string>int32</string>
		<string>int64</string>
		<string>int8</string>
		<string>string</string>
		<string>uint</string>
		<string>uint16</string>
		<string>uint32</string>
		<string>uint64</string>
		<string>uint8</string>
		<string>uintptr</string>
	</array>
	<key>BBLMSuffixMap</key>
	<array>
		<dict>
			<key>BBLMLanguageSuffix</key>
			<string>.go</string>
		</dict>
	</array>
	<key>Language Features</key>
	<dict>
		<key>Identifier and Keyword Character Class</key>
		<string>A-Za-z0-9_</string>
		<key>Open Block Comments</key>
		<string>/*</string>
		<key>Close Block Comments</key>
		<string>*/</string>
		<key>Open Line Comments</key>
		<string>//</string>
		<key>Prefix for Functions</key>
		<string>func</string>
		<key>Prefix for Procedures</key>
		<string>func</string>
		<key>Open Parameter Lists</key>
		<string>(</string>
		<key>Close Parameter Lists</key>
		<string>)</string>
		<key>Open Statement Blocks</key>
		<string>{</string>
		<key>Close Statement Blocks</key>
		<string>}</string>
		
		<key>String Pattern</key>
		<string><![CDATA[
			(?x:
				("	(?s: \\. | [^"])*?	(?: " | $)) |	 (?# Interpreted string literal)
				('	(?s: \\' | [^'])*?	(?: ' | $)) |	 (?# Rune literal)
				(`	(?s: [^`])			*?	`)						 (?# Raw string literal)
			)]]>
		</string>
		
		<key>Comment Pattern</key>
		<string><![CDATA[
				(?x:
						(//.*$)				 | (?# Line comment)
						(?s:/\*.*?\*/)	 (?# Block comment)
				)]]>
		</string>
		
		<key>Skip Pattern</key>
		<string><![CDATA[
			(?x:
					(?P>comment) |
					(?P>string)
			)]]>
		</string>

		<!--
			func <functionName> (optionalParameters) optionalReturnType {
				body
			}
			func <functionName> (optionalParameters) (optionalReturnValues) {
				body
			}
			func (receiver) <functionName> (optionalParameters) (optionalReturnValues) {
				body
			}
		-->
		<key>Function Pattern</key>
		<string><![CDATA[
			(?x: 
				(?P<function>
					func
					(?:(?>(?>\s+)))+
					(?# receiver)
					(?P<receiver>
						\(\s*
						(?P<identifier>([a-zA-Z_][a-zA-Z0-9_]*)+)
						\s+
						[*]*(?P>identifier)
						\)
						(?:(?>(?>\s+)))+
					)*
					(?# function name)
					(?P<function_name>(?P>identifier))
					(?:(?>(?>\s+)))*
					(?P<signature>
						(?P<parameters>
							\(\s*
								(
									((?P>identifier)\s+)?\s*
									([.]{3})?
									(?P<type>
										(?P<typename>
											(?P>identifier) |
											(?P<qualfiedidentifier>
												(?P>identifier)[.](?P>identifier)
											)
										) |
										(?P<typelit>
											(?P<arraytype>
												\[((?P>identifier)|[0-9]+)\](?P>type)
											) |
											(?P<structtype>
												struct\s+\{\s*
												(((?P<fielddecl>
													(?P>identifier)\s+
													((?P>type) | [*](?P>identifier))
													(\s+(?P>string))?
												)\s*)|[;]+)*
												\s*\}											
											) |
											(?P<pointertype>
												[*](?P>type)
											) |
											(?P<functiontype>
												func\s*(?P>signature)
											) |
											(?P<interfacetype>
												interface\s*\{\s*
												((?P<methodspec>
													((?P>identifier)\s*(?P>signature)|(?P>identifier))
												)|[;]+)*\s*\}
											) |
											(?P<slicetype>
												\[\](?P>type)
											) |
											(?P<maptype>
												map\s*\[\s*(?P>type)\s*\]\s*(?P>type)
											) |
											(?P<channeltype>
												(chan<-|<-chan|chan)\s+(?P>type)
											)
										) |
										\(\s*(?P>type)\s*\)
									)
									\s*[,]?\s*
								)*
                            \)
                        )
						(?:(?>(?>\s+)))*
						(?P<result>
							(?P>type)|(?P>parameters)
						)*
					)					
					(?:(?>(?>\s+)))*
					(?P<braces>
						{
							(?:
								(?>
									(?> [^'"{}]+ ) | (?: / (?![/*]) ) | (?P>comment) | (?P>string) | (?P>braces)
								)
							)*
						}
					)
				)
			)]]>
		</string>		 
	</dict> 
</dict>
</plist>

